data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ils<-grep("IL", colnames(training))
ils
ils[,13]<-131
ils[13]<-131
ils
dim(training)
tr<-training[,ils]
ts<-testing[,ils]
pca<-preProcess(tr, method="pca", thresh=0.8)
pca<-preProcess(tr[,-13], method="pca", thresh=0.8)
trainPC<-predict(pca, tr[,13])
?predict
??predict
trainPC<-predict(pca, tr[,-13])
modelFit<-train(trainPC, tr[,13], method="glm")
install.packages('e1071')
library('e1071')
library(e1071)
modelFit<-train(trainPC, tr[,13], method="glm")
library(e1071)
modelFit<-train(trainPC, tr[,13], tr[,13]~.,method="glm")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
install.packages("kernlab")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
summary(trainPC)
dim(training)
modelFit <- train(type ~.,data=training,
preProcess=c("center","scale"),method="glm")
summary(modelFit)
tr
dim(tr)
colnames(tr)
modelFit<-train(tr$Genotype~., method="glm",preProcess="glm",data=tr)
modelFit<-train(tr$Genotype~., method="glm",preProcess="pca",data=tr)
summary(tr[,1])
summary(tr[,2])
summary(tr[,3])
summary(tr[,4])
summary(tr)
summary(tr[,-13])
trt<-tr[,c(1,2,13)]
modelFit<-train(trt$Genotype~., method="glm",preProcess="pca",data=trt)
q()
{return OTHER}
}
}
return other
}
isNum
isNum<-function(x){
if (class(x)==num){
return numeric
}
if (class(x)!=num)
return other
}
if (class(x)!="numeric")
else
else
her
isNum<-function(x){
if (class(x)=="numeric"){
a<-"number"
}
else
a<-"other"
}
class(x)=="numeric
"
isNum<-function(x){
class(x)=="numeric"
}
isNum<-function(x){
if {class(x)=="numeric"
print NUM}
else
{print OTHER}
}
print OTHER}
else (class(x)!="numeric"){
print OTHER
isNum<-function(x){
if (class(x)=="numeric"){
print NUM}
else {print OTHER}
}
isNum<-function(x){
if (class(x)=="numeric"){
print "NUMBER"}
else {print "OTHER"}
}
if (class(x)=="num"){
print "NUMBER"}
isNum<-function(x){
if (class(x)=="num"){
print "NUMBER"}
else {print "OTHER"}
}
}
isNum<-function(x){
if (class(x)=="num"){
print "NUMBER"
}
else {print "OTHER"
}
}
isNum<-function(x){
if (class(x)=="num"){
print "NUMBER"
}
}
}
return "NUMBER"
if (is.numeric(x)){
isNum<-function(x){
if (is.numeric(x)){
return "NUMBER"
}
})
isNum<-function(x){
if (is.numeric(x)){
return "NUMBER"
}
}
for (i in 1:ncol(x)){
MM
)
isNum<-function(x){
for (i in 1:ncol(x)){
class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
print (class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
print (class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-(class(x[,i]))
}
}
c(class(x[,i])
isNum<-function(x){
for (i in 1:ncol(x)){
c(class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
c(class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return (class(x[,i])
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
print (class(x[,i])
}
}
print (class(x[,i]))
isNum<-function(x){
for (i in 1:ncol(x)){
print (class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i]))
}
return a
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i]))
}
return a
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i]))
}
return (a)
}
isNum<-function(x){
for (i in 1:ncol(x)){
a<-c(class(x[,i]))
}
print (a)
}
isNum<-function(x){
for (i in 1:ncol(x)){
return list(class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return (list(class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return (list(class(x[,i])))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return (class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
return (class(x[,i]))
}
}
isNum<-function(x){
for (i in 1:ncol(x)){
print (class(x[,i]))
}
}
isNum<-function(x){
a=1
b=''
while (a<ncol(x)+1){
b<-b+class(x[,i]
a<-a+1
}
}
isNum<-function(x){
a=1
b=''
while (a<ncol(x)+1){
b<-b+class(x[,i])
a<-a+1
}
}
isNum<-function(x){
a=1
b=''
while (a<ncol(x)+1){
b<-b+class(x[,a])
a<-a+1
}
}
isNum<-function(x){
a=1
b=character()
while (a<ncol(x)+1){
b<-b+class(x[,a])
a<-a+1
}
}
isNum<-function(x){
a=1
b=character()
while (a<ncol(x)+1){
b<-c(b,class(x[,a]))
a<-a+1
}
}
isNum<-function(x){
a=1
b=character()
while (a<ncol(x)+1){
b<-c(b,class(x[,a]))
a<-a+1
}
print (b)
}
isNum<-function(x){
a=1
b=character()
while (a<ncol(x)+1){
b<-c(b,class(x[,a]))
a<-a+1
}
return (b)
}
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
library("caret", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("ggplot2")
library("caret", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("class")
model1<-train(train2, classTrain, preProcess="pca", method="knn", trControl=trainControl(method = "cv", number=10))
predictTest2<-predict(model2, test2)
install.packages("manipulate")
library("manipulate", lib.loc="C:/Program Files/R/R-3.1.1/library")
detach("package:manipulate", unload=TRUE)
library("manipulate", lib.loc="C:/Program Files/R/R-3.1.1/library")
library(manipulate)
manipulate(plot(1:x), x=slider(1:100))
manipulate(plot(1:x), x=slider(1,100))
manipulate(plot(1,x), x=slider(1,100))
manipulate(plot(x,1:x), x=slider(1,100))
manipulate(plot(1:x), x=slider(1,100))
z<-seq(1:100,2)
z<-seq(1:100)
length(z)
z1<-z+1
median(z)
median(z1)
z2<-z+2
median(z2)
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
library(shiny)
library(multtest)
data(golub)
library(limma)
library(rCharts)
gol.fac<-factor(golub.cl, levels=c(0,1), labels=c("ALL","AML"))
bluered <- colorRampPalette(c("blue","white","red"))(256)
col.fac<-factor(gol.fac, levels=c("ALL","AML"), labels=c("red","blue"))
col.fac<-as.character(col.fac)
design<-model.matrix(~gol.fac)
colnames(design)<-c("ALL","AML")
fit<-lmFit(golub,design)
fit2<-eBayes(fit)
topTable(fit2, coef =input$Disease,adjust=input$Adjustment, p.value=input$Cutoff, number=input$gnum)
topTable(fit2, coef ="AML",adjust="BH", p.value=0.05, number=10)
top<-topTable(fit2, coef ="AML",adjust="BH", p.value=0.05, number=10)
rownames(top)
as.numeric(rownames(top))
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
heatmap(golub[as.numeric(rownames(top)),], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=F,col=bluered)
top<-topTable(fit2, coef ="AML",adjust="BH", p.value=0.05, number=50)
heatmap(golub[as.numeric(rownames(top)),], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=F,col=bluered)
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
shiny::runApp('C:/Users/x/Desktop/Coursera/golub_shiny2')
source("http://bioconductor.org/biocLite.R")
biocLite(c("multtest","limma"))
rm(biocLite)
source("http://bioconductor.org/biocLite.R")
biocLite(c("multtest","limma"))
bluered <- colorRampPalette(c("blue","white","red"))(256)
col.fac<-factor(gol.fac, levels=c("ALL","AML"), labels=c("red","blue"))
heatmap(golub[as.numeric(rownames(tbl))), ], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered)
data(golub)
gol.fac<-factor(golub.cl, levels=c(0,1), labels=c("ALL","AML"))
library(multtest)
library(limma)
data(golub)
gol.fac<-factor(golub.cl, levels=c(0,1), labels=c("ALL","AML"))
golub[as.numeric(rownames(tbl)), ], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered
heatmap(golub[as.numeric(rownames(tbl), ], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered)
heatmap(golub[as.numeric(rownames(tbl),], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered)
heatmap(golub[as.numeric(rownames(tbl)),], ColSideColors=col.fac,Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered)
tbl<-topTable(fit2, coef ="AML",adjust="BH", p.value=0.01, sort.by="P", number=5)
golub.gnames[808,2]
boxplot(golub[808,]~gol.fac, col=c("red","blue""))
)
)
library(ggplot2)
data1<-cbind(golub.gnames[808,],gol.fac)
head(data1)
---
title       : Gene expression in acute leukemia
subtitle    :
author      : Velizar Shivarov
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Motivation
1. Omics technologies are paving their way towards the clinics
2. Large scale data require in-depth analytical skills
3. User-friendly applications analytical tools are needed
## Goal
1. To develop a shiny application demonstrating differential gene expression in acute leukemia
2. To perform that task using a classical dataset from Golub et al.(Science, 1999)
--- .class #id
## Basic Differential gene expression analysis using limma
We need to install Biconductor and several packages
```{r, results='hide', warning=FALSE}
source("http://bioconductor.org/biocLite.R")
biocLite(c("multtest","limma"))
library(multtest)
library(limma)
```
We will demonstrate a standard analysis of differential gene expression between AML and ALL using the limma approach
```{r, echo=FALSE}
data(golub)
gol.fac<-factor(golub.cl, levels=c(0,1), labels=c("ALL","AML"))
design<-model.matrix(~gol.fac)
colnames(design)<-c("ALL","AML")
fit<-lmFit(golub,design)
fit2<-eBayes(fit)
tbl<-topTable(fit2, coef ="AML",adjust="BH", p.value=0.01, sort.by="P", number=5)
tbl
```
---
You can plot a heatmap with unsupervised clustering of the differentially espressed genes.
```{r, fig.height = 6, fig.align = 'center', message = F}
bluered <- colorRampPalette(c("blue","white","red"))(256)
col.fac<-as.character(factor(gol.fac, levels=c("ALL","AML"), labels=c("red","blue")))
heatmap(golub[as.numeric(rownames(tbl)),], ColSideColors=col.fac,
Rowv=NULL, Colv=NULL, labCol=F, labRow=rownames(tbl),col=bluered)
```
---
```{r, fig.height = 6, fig.align = 'center', message = F}
golub.gnames[808,2]
library(ggplot2)
data1<-cbind(golub.gnames[808,],gol.fac)
head(data1)
boxplot(golub[808,]~gol.fac, col=c("red","blue""))
```
## The code for my app is [my ShinyApp] (https://vshivarov.shinyapps.io/golub_shiny3/)
---
##Question 1
If you use the default settings at the server what is the ID of the sixth gene in the table output?
)
library(slidify)
getwd("C:/Users/x/Desktop/Coursera/golub_present1")
setwd("C:/Users/x/Desktop/Coursera/golub_present1")
publish(title = 'present1', 'index.html', host = 'rpubs')
publish(user = 'vshivarov', repo = 'vshivarov.github.io')
